import torch
import torch.nn as nn
import torch.nn.functional as F
import math

class ConsciousAttention(nn.Module):
    def __init__(self, d_model, nhead, dropout=0.1):
        super(ConsciousAttention, self).__init__()
        self.d_model = d_model
        self.nhead = nhead
        self.d_k = d_model // nhead
        
        self.query = nn.Linear(d_model, d_model)
        self.key = nn.Linear(d_model, d_model)
        self.value = nn.Linear(d_model, d_model)
        
        self.consciousness_gate = nn.Linear(d_model, 1)
        self.consciousness_transform = nn.Linear(d_model, d_model)
        
        self.dropout = nn.Dropout(dropout)
        
    def forward(self, q, k, v, mask=None):
        bs = q.size(0)
        
        # Regular attention
        q = self.query(q).view(bs, -1, self.nhead, self.d_k).transpose(1, 2)
        k = self.key(k).view(bs, -1, self.nhead, self.d_k).transpose(1, 2)
        v = self.value(v).view(bs, -1, self.nhead, self.d_k).transpose(1, 2)
        
        scores = torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)
        if mask is not None:
            scores = scores.masked_fill(mask == 0, -1e9)
        attn = F.softmax(scores, dim=-1)
        
        # Consciousness gate
        consciousness = torch.sigmoid(self.consciousness_gate(v.transpose(1, 2).reshape(bs, -1, self.d_model)))
        
        # Apply consciousness to attention
        conscious_attn = attn * consciousness.unsqueeze(1).unsqueeze(1)
        
        output = torch.matmul(conscious_attn, v)
        output = output.transpose(1, 2).contiguous().view(bs, -1, self.d_model)
        
        # Consciousness transform
        output = output + self.consciousness_transform(output)
        
        return output, conscious_attn

class ConsciousTransformerLayer(nn.Module):
    def __init__(self, d_model, nhead, dim_feedforward=2048, dropout=0.1):
        super(ConsciousTransformerLayer, self).__init__()
        self.conscious_attn = ConsciousAttention(d_model, nhead, dropout)
        self.ffn = nn.Sequential(
            nn.Linear(d_model, dim_feedforward),
            nn.ReLU(),
            nn.Linear(dim_feedforward, d_model)
        )
        self.norm1 = nn.LayerNorm(d_model)
        self.norm2 = nn.LayerNorm(d_model)
        self.dropout = nn.Dropout(dropout)
        
    def forward(self, src, src_mask=None):
        src2, _ = self.conscious_attn(src, src, src, mask=src_mask)
        src = src + self.dropout(src2)
        src = self.norm1(src)
        
        src2 = self.ffn(src)
        src = src + self.dropout(src2)
        src = self.norm2(src)
        
        return src

class ConsciousLanguageModel(nn.Module):
    def __init__(self, vocab_size, d_model, nhead, num_layers, dim_feedforward=2048, dropout=0.1):
        super(ConsciousLanguageModel, self).__init__()
        self.embedding = nn.Embedding(vocab_size, d_model)
        self.pos_encoder = PositionalEncoding(d_model, dropout)
        
        self.layers = nn.ModuleList([
            ConsciousTransformerLayer(d_model, nhead, dim_feedforward, dropout)
            for _ in range(num_layers)
        ])
        
        self.decoder = nn.Linear(d_model, vocab_size)
        
    def forward(self, src, src_mask=None):
        src = self.embedding(src) * math.sqrt(self.embedding.embedding_dim)
        src = self.pos_encoder(src)
        
        for layer in self.layers:
            src = layer(src, src_mask)
        
        output = self.decoder(src)
        return output

class PositionalEncoding(nn.Module):
    def __init__(self, d_model, dropout=0.1, max_len=5000):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)

        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + self.pe[:x.size(0), :]
        return self.dropout(x)

# Model kullanımı
vocab_size = 30000
d_model = 512
nhead = 8
num_layers = 6

model = ConsciousLanguageModel(vocab_size, d_model, nhead, num_layers)

# Örnek girdi
src = torch.randint(0, vocab_size, (20, 32))  # (seq_len, batch_size)
src_mask = torch.ones(20, 20)  # (seq_len, seq_len)

output = model(src, src_mask)
print(output.shape)  # Should be (20, 32, vocab_size)
